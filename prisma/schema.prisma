// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  name       String
  email      String       @unique
  password   String
  role       UserRole     @default(USER)
  status     UserStatus   @default(ACTIVE)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  profile    UserProfile?
  foundItems FoundItem[]
  claims     Claim[]
  lostItems  LostItem[]

  @@map("users")
}

model UserProfile {
  id        String   @id @default(uuid())
  bio       String
  age       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])

  @@map("userprofiles")
}

model ItemCategory {
  id         String      @id @default(uuid())
  name       String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  foundItems FoundItem[]
  lostItems  LostItem[]

  @@map("itemcategories")
}

model FoundItem {
  id          String       @id @default(uuid())
  userId      String
  categoryId  String
  name        String
  description String
  location    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  category    ItemCategory @relation(fields: [categoryId], references: [id])
  claim       Claim[]

  @@map("founditems")
}

model LostItem {
  id          String       @id @default(uuid())
  userId      String
  categoryId  String
  name        String
  description String
  location    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  category    ItemCategory @relation(fields: [categoryId], references: [id])

  claim Claim[]

  @@map("lostitems")
}

model Claim {
  id                     String    @id @default(uuid())
  userId                 String
  status                 Status    @default(PENDING)
  foundItemId            String
  lostItemId             String
  distinguishingFeatures String
  lostDate               DateTime
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  user                   User      @relation(fields: [userId], references: [id])
  founditem              FoundItem @relation(fields: [foundItemId], references: [id])
  lostItem               LostItem  @relation(fields: [lostItemId], references: [id])

  @@map("claims")
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}
